{"version":3,"sources":["components/Header.js","Context/CategoriasContext.js","Context/RecetasContext.js","components/Formulario.js","Context/ModalContext.js","components/Receta.js","components/ListarRecetas.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","CategoriasContext","createContext","CategoriasProvider","props","useState","categorias","setCategorias","useEffect","a","axios","get","data","drinks","obtenerCategorias","Provider","value","children","RecetasContext","RecetasProvider","recetas","setRecetas","nombre","categoria","busqueda","buscarRecetas","consultar","guardarConsulta","url","resultado","obtenerRecetas","Formulario","setBusqueda","useContext","obtenerDatosReceta","e","target","name","onSubmit","preventDefault","FclassName","type","placeholder","onChange","map","strCategory","key","ModalContext","ModalProvider","idReceta","setIdReceta","infoReceta","setInfoReceta","obtenerReceta","rand","Math","round","random","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","boxShadow","shadows","padding","spacing","overflow","height","maxHeight","display","Receta","receta","modalStyle","open","setOpen","classes","strDrink","src","strDrinkThumb","alt","onClick","idDrink","Modal","onClose","style","strInstructions","console","log","ingredientes","index","push","mostrarIngredientes","ListarRecetas","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d5eea95c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"bg-alert\" >\r\n            <h1>Los mejores cocteles en un mismo sitio</h1>\r\n        </header>\r\n    );\r\n}\r\nexport default Header;","import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n//crear el context\r\nexport const CategoriasContext = createContext();\r\n\r\n\r\n//provider es donde se encuentran las funciones y state\r\nconst CategoriasProvider = (props) => {\r\n    const [categorias, setCategorias] = useState([]);\r\n\r\n\r\n    //llamado a la api\r\n    useEffect(() => {\r\n        const obtenerCategorias = async () => {\r\n            const url = 'https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list';\r\n            const categorias = await axios.get(url);\r\n            setCategorias(categorias.data.drinks);\r\n        }\r\n        obtenerCategorias();\r\n    },[])\r\n\r\n    return (\r\n        <CategoriasContext.Provider value={{\r\n            categorias\r\n        }}>\r\n            {props.children}\r\n        </CategoriasContext.Provider>\r\n    )\r\n}\r\nexport default CategoriasProvider;","import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios'\r\n\r\nexport const RecetasContext = createContext();\r\n\r\nconst RecetasProvider = (props) => {\r\n    const [recetas, setRecetas] = useState([])\r\n    const [busqueda, buscarRecetas] = useState({\r\n        nombre: '',\r\n        categoria: ''\r\n    })\r\n\r\n    const [consultar, guardarConsulta] = useState(false)\r\n    const { nombre, categoria } = busqueda;\r\n\r\n    useEffect(() => {\r\n        if (consultar) {\r\n            const obtenerRecetas = async () => {\r\n                const url = `https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=${nombre}&c=${categoria}`;\r\n                const resultado = await axios.get(url);\r\n                setRecetas(resultado.data.drinks);\r\n            }\r\n            obtenerRecetas();\r\n        }\r\n\r\n    }, [busqueda])\r\n\r\n    return (<RecetasContext.Provider value={{recetas, buscarRecetas, guardarConsulta }}>\r\n        {props.children}\r\n    </RecetasContext.Provider>\r\n    )\r\n}\r\n\r\nexport default RecetasProvider;","import React, { useContext, useState } from 'react';\r\nimport { CategoriasContext } from '../Context/CategoriasContext';\r\nimport { RecetasContext } from '../Context/RecetasContext';\r\n\r\nconst Formulario = () => {\r\n    const [busqueda, setBusqueda] = useState({\r\n        nombre: '', categoria: ''\r\n    })\r\n    const { categorias } = useContext(CategoriasContext);\r\n    const { buscarRecetas, guardarConsulta } = useContext(RecetasContext);\r\n\r\n    const obtenerDatosReceta = e => {\r\n        setBusqueda({\r\n            ...busqueda,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n\r\n    return (<form onSubmit={e => {\r\n        e.preventDefault();\r\n        buscarRecetas(busqueda)\r\n        guardarConsulta(true)\r\n    }}\r\n        FclassName=\"col-12\" >\r\n        <fieldset className=\"text-center text-light\">\r\n            <legend>Busca Por Categoria o ingrediente</legend>\r\n        </fieldset>\r\n        <div className=\"row \">\r\n            <div className=\"col-md-4\">\r\n                <input type=\"text\" name=\"nombre\"\r\n                    className=\"form-control\" placeholder=\"Buscar Por Ingrediente\"\r\n                    onChange={obtenerDatosReceta} />\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n                <select className=\"form-control\" name=\"categoria\" onChange={obtenerDatosReceta}>\r\n                    <option value=\"\"  > --Selecciona Categoria--</option>\r\n                    {\r\n                        categorias.map(categoria => (\r\n                            <option value={categoria.strCategory} key={categoria.strCategory} >{categoria.strCategory}</option>\r\n                        ))\r\n                    }\r\n                </select>\r\n\r\n            </div>\r\n            <div className=\"col-md-4\">\r\n                <input type=\"submit\" value=\"Buscar recetas\" className=\"btn btn-block btn-primary\" />\r\n            </div>\r\n        </div>\r\n    </form >\r\n    )\r\n}\r\nexport default Formulario;","import React, { useState, useEffect, useContext, createContext } from 'react';\r\nimport axios from 'axios'\r\n\r\nexport const ModalContext = createContext();\r\n\r\n\r\nconst ModalProvider = (props) => {\r\n\r\n    //state del provider\r\n    const [idReceta, setIdReceta] = useState(null)\r\n    const [infoReceta, setInfoReceta] = useState({})\r\n    //una vez que tenemos una receta, hacemos el llamado a la api\r\n    useEffect(() => {\r\n\r\n\r\n        const obtenerReceta = async () => {\r\n            if (!idReceta) return;\r\n            const url = `https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${idReceta}`\r\n            const resultado = await axios.get(url);\r\n            setInfoReceta(resultado.data.drinks[0])\r\n        }\r\n        obtenerReceta();\r\n\r\n\r\n    }, [idReceta])\r\n    return (<ModalContext.Provider value={{\r\n        setInfoReceta,  setIdReceta, infoReceta\r\n    }}>\r\n        {props.children}\r\n    </ModalContext.Provider>\r\n    )\r\n}\r\nexport default ModalProvider","import React, { useContext, useState } from 'react'\r\nimport { ModalContext } from '../Context/ModalContext'\r\nimport Modal from '@material-ui/core/Modal';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nfunction rand() {\r\n    return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n    const top = 50 + rand();\r\n    const left = 50 + rand();\r\n\r\n    return {\r\n        top: `${top}%`,\r\n        left: `${left}%`,\r\n        transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        position: 'absolute',\r\n        width: 300,\r\n        backgroundColor: theme.palette.background.paper,\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2,'auto'),\r\n        overflow: 'scroll',\r\n        height: '100%',\r\n        maxHeight: 500,\r\n        display: 'block'\r\n\r\n    },\r\n}));\r\n\r\nconst Receta = ({ receta }) => {\r\n    //configuracion del modal de material-ui\r\n    const [modalStyle] = useState(getModalStyle);\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    //extraer los valores del provider\r\n    const { setIdReceta, infoReceta, setInfoReceta } = useContext(ModalContext);\r\n    //muestra y formatea los ingredientes\r\n    const mostrarIngredientes = (receta) => {\r\n        console.log(receta)\r\n        let ingredientes = [];\r\n        for (let index = 0; index < 16; index++) {\r\n            if (receta[`strIngredient${index}`])\r\n                ingredientes.push(\r\n                    <li>{receta[`strIngredient${index}`]}{receta[`strMeasure${index}`]}</li>\r\n                )\r\n        }\r\n        return ingredientes;\r\n    }\r\n\r\n    return (\r\n        <div className=\"col-md-4 mb-3\">\r\n            <div className=\"card\">\r\n                <h2 className=\"card-header\">{receta.strDrink}</h2>\r\n                <img src={receta.strDrinkThumb} className=\"card-img-top\" alt={`Imagen de ${receta.strDrink}`} />\r\n\r\n\r\n                <div className=\"card-body\">\r\n                    <button type=\"button\" className=\"btn btn-block btn-primary\" onClick={() => { setIdReceta(receta.idDrink); handleOpen(); }}>\r\n                        Ver Receta\r\n                </button>\r\n                    <Modal open={open} onClose={() => { setIdReceta(null); handleClose(); setInfoReceta({}) }}>\r\n                        <div style={modalStyle} className={classes.paper}>\r\n                            <h2>{infoReceta.strDrink}</h2>\r\n                            <h3 className=\"mt-4\">Instrucciones</h3>\r\n                            <p>{infoReceta.strInstructions}</p>\r\n                            <h3>Ingredientes y cantidades</h3>\r\n                            <ul>\r\n                                {mostrarIngredientes(infoReceta)}\r\n                            </ul>\r\n                            <img className=\"img-fluid my-4\" src={infoReceta.strDrinkThumb} alt=\"\" />\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n            </div>\r\n        </div >\r\n\r\n    )\r\n}\r\nexport default Receta;\r\n","import React, { useContext } from 'react'\r\nimport { RecetasContext } from '../Context/RecetasContext'\r\nimport Receta from './Receta'\r\nconst ListarRecetas = () => {\r\n    const { recetas } = useContext(RecetasContext)\r\n    return (\r\n        <div>\r\n            <div className=\"row mt-5\">\r\n                {recetas.map(receta => (\r\n                    <Receta key={receta.idDrink}\r\n                        receta={receta}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ListarRecetas;","import React, { Fragment } from 'react';\nimport Header from './components/Header';\nimport Formulario from './components/Formulario';\nimport CategoriasProvider from './Context/CategoriasContext';\nimport RecetasProvider from './Context/RecetasContext';\nimport ListarRecetas from './components/ListarRecetas';\nimport ModalProvider from './Context/ModalContext'\n\nfunction App() {\n  return (\n    <ModalProvider>\n      <RecetasProvider>\n        <CategoriasProvider>\n          <Header />\n          <div className=\"container mt-5\">\n            <div className=\"row d-flex justify-content-center\">\n              <Formulario />\n            </div>\n\n            <ListarRecetas />\n          </div>\n        </CategoriasProvider>\n      </RecetasProvider>\n    </ModalProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <App / >,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}